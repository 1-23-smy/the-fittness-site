package graphProblms;



import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

class Edge {
  int targetNode;
  int distanceFromNode;

  Edge(int targetNode, int distance) {
    this.targetNode = targetNode;
    this.distanceFromNode = distance;
  }
}

class Graph {
	int nodes;
  List<List<Edge>> graph;
  boolean visited[];
  int distance[];

  Graph(int nodes) {
    graph = new ArrayList<>();
    visited = new boolean[nodes];
    distance = new int[nodes];
    this.nodes = nodes;

    for (int i = 0; i < nodes; i++) {
      graph.add(i, new ArrayList<>());
      distance[i] = Integer.MAX_VALUE;
    }
  }

  public void addEdge(int sourceNode, int targetNode, int distance) {
    graph.get(sourceNode).add(new Edge(targetNode, distance));
   graph.get(targetNode).add(new Edge(sourceNode, distance)); //undirected
  }

 
  //dijkestra
  public int minimumDistanceBetweenTwoNodes(int source, int destination) {
    if (source == destination)
      return 0;

    PriorityQueue<Edge> minHeap = new PriorityQueue<>((e1, e2) -> e1.distanceFromNode - e2.distanceFromNode);

    distance[source] = 0;
    minHeap.add(new Edge(0, 0));

    while (!minHeap.isEmpty()) {
      int v = minHeap.poll().targetNode;
      if (visited[v])
        continue;

      visited[v] = true;

      List<Edge> childList = graph.get(v);

      for (Edge child : childList) {
        int dist = child.distanceFromNode;
        int childNode = child.targetNode;

        if (!visited[childNode] && (distance[v] + dist < distance[childNode])) {
          distance[childNode] = distance[v] + dist;
          child.distanceFromNode = distance[v] + dist;
          minHeap.add(child);
        }
      }
    }

    return distance[destination];
  }
  
  
  
  
  //prims 
  public int mst() {
	    int minCost = 0;
	    
	    for(int i = 0; i < nodes; i++) {
	      if(!visited[i]) {
	        minCost = minCost + minimumSpanningTreeUnweightedGraph(i);
	      }
	    }
	    
	    return minCost;
	  }

	  public int minimumSpanningTreeUnweightedGraph(int source) {

	    PriorityQueue<Edge> minEdgeHeap = new PriorityQueue<>((e1, e2) -> e1.distanceFromNode - e2.distanceFromNode);

	    visited[source] = true;
	    List<Edge> childOfSource = graph.get(source);
	    
	    for(Edge edge: childOfSource) {
	      minEdgeHeap.add(edge);
	    }
	    
	    int minimumCost = 0;
	    while (!minEdgeHeap.isEmpty()) {

	      Edge minValueEdge = minEdgeHeap.poll();

	      if (visited[minValueEdge.targetNode]) {
	        continue;
	      }

	      visited[minValueEdge.targetNode] = true;
	      
	      minimumCost = minimumCost + minValueEdge.distanceFromNode;

	      List<Edge> childList = graph.get(minValueEdge.targetNode);
	      
	      for (Edge edge : childList) {
	        if (!visited[edge.targetNode]) {
	          minEdgeHeap.add(edge);
	        }
	      }
	    }

	    return minimumCost;
	  }

}

public class Dijkestra {

  public static void main(String[] args) {
    int nodes = 5;

    Graph a = new Graph(nodes);
//for dijkestra
//    a.addEdge(0, 1, 5);
//    a.addEdge(0, 3, 8);
//    a.addEdge(1, 2, 6);
//    a.addEdge(1, 3, 9);
//    a.addEdge(3, 4, 7);
//    a.addEdge(3, 2, 2);
//    a.addEdge(4, 1, 6);
//    a.addEdge(2, 4, 4);
//
//    System.out.println(a.minimumDistanceBetweenTwoNodes(0,4));
    
    
    a.addEdge(0, 1, 6); 
    a.addEdge(0, 3, 4); 
    a.addEdge(1, 2, 10);
    a.addEdge(1, 3, 7);
    a.addEdge(1, 4, 7);
    a.addEdge(2, 3, 8);
    a.addEdge(2, 4, 5);
    a.addEdge(3, 4, 12);
    
    System.out.println(a.mst());
  }
}
