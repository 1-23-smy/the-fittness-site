package graphs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class implementationGraph {
 static	private  LinkedList<Integer> adj[];
	
	
public  implementationGraph(int v) {
	adj=new LinkedList[v];
	for(int i=0;i<v;i++) {
		adj[i]=new LinkedList<Integer>();
	}
}

public void addEdge(int source, int destination) {
adj[source].add(destination);
adj[destination].add(source);
}

public static boolean dfs(int source, int destination) {
	boolean vis[]=new boolean[adj.length];
	vis[source]=true;
	return dfsUtil(source,destination,vis);
}


private static boolean dfsUtil(int source,int destination,boolean vis[]) {
	if (source==destination)return true;
		for(int neighbor:adj[source]) {
			if(!vis[neighbor]) {
				vis[neighbor]=true;                                          //recursive dfs
				boolean isConnected=dfsUtil(neighbor,destination,vis);
				if(isConnected)return true;
			}
		}
		return false;
}

//dfs using stack
//static boolean vis[]=new boolean[adj.length];
 
public static boolean dfsStack(int source,int destination) {
	boolean vis[]=new boolean[adj.length];
	int arr[]=new int[adj.length];
	int ct=0;
	vis[source]=true;
	Stack <Integer>s=new Stack<>();
	s.push(source);
	System.out.println(source);
	while(!s.isEmpty()) {
		int cur=s.pop();
		
		if(cur==destination)return true;
		
		for(int neighbor:adj[cur]) {
			if(!vis[neighbor]) {
	vis[neighbor]=true; 
System.out.println(neighbor);
		s.push(neighbor);
			}
		}
	}
	return false;
}

public static boolean isConnected(int s, int d) {
	 boolean vis[]=new boolean[adj.length];
	//boolean r= dfsStack(s,d,vis); //comment hata
	for(int i=0;i<adj.length;i++) {
		if(vis[i]==false)return false;
	}
	return true;
}


public static int BFS(int source,int dest) {
	boolean vis[]=new boolean[adj.length];
	int parent[]=new int[adj.length];  //to store parent source of that node
	Queue<Integer>q=new LinkedList<>();
	
	q.add(source);
	
	parent[source]=-1;
	vis[source]=true;
	
	while(!q.isEmpty()) {
		int cur=q.poll();
		if(cur==dest) break;
		
		for(int neighbor:adj[cur]) {
			if(!vis[neighbor]) {
				vis[neighbor]=true;
				q.add(neighbor);
				parent[neighbor]=cur;
			}		
		}
		}
	int cur=dest;
	int distance=0;
	while(parent[cur]!=-1) {
		System.out.print(cur+" -> ");
		cur=parent[cur];
		distance++;
	}
	System.out.println();
	return distance;
}




public static void main(String args[]) {
	Scanner sc=new Scanner(System.in);
	System.out.println("enter no of vertices and eedges");
	int v=sc.nextInt();
	int e=sc.nextInt();
	implementationGraph graph=new implementationGraph(v);
	System.out.println("enter"+e+"edges");
	for(int i=0;i<e;i++) {
		int source=sc.nextInt();
		int destination=sc.nextInt();
	graph.addEdge(source, destination);
	}
	System.out.println("enter source and dest");
	int s=sc.nextInt();
	int d=sc.nextInt();

//	int n=BFS(s,d);
//	System.out.println(n);
	
	//System.out.print("possible "+dfs(s,d));
	System.out.print("possible "+dfsStack(s,d));
	
//System.out.println(isConnected(s,d));
}
}
